edit html




<div class="container">
    <!-- <div class="col-md-12"> -->
      <h2 class="text-center">Edit User Contact</h2>
      <form [formGroup]="addForm" (ngSubmit)="onSubmit()">
    <div class="form-group">
      <label for="id">Id:</label>
      <input formControlName="id"required placeholder="ID" name="id" class="form-control" id="id">
      <div class="feedback-red" *ngIf="isInvalid('id')">
        
      </div>
    </div>
        <div class="form-group">
          <label for="firstname">First Name:</label>
          <input formControlName="firstname" required placeholder="First Name" name="firstname" class="form-control" id="firstname">
          <div class="feedback-red" *ngIf="isInvalid('firstname')">
            First Name is empty.
          </div>
        </div>
    
        <div class="form-group">
          <label for="lastname">Last Name:</label>
          <input formControlName="lastname" required placeholder="Last name" name="lastname" class="form-control" id="lastname">
          <div class="feedback-red" *ngIf="isInvalid('lastname')">
            Last Name is empty.
          </div>
        </div>
    
        <div class="form-group">
          <label for="email">Email address:</label>
          <input type="email" formControlName="email" required placeholder="Email" name="email" class="form-control" id="email">
          <div class="feedback-red" *ngIf="isEmailInvalid('email')">
            Email is not valid.
          </div>
        </div>
    <div class="form-group">
      <label for="place">Place:</label>
      <input type="place" formControlName="place" required placeholder="place" name="place" class="form-control" id="place">
      <div class="feedback-red" *ngIf="isInvalid('place')"></div>
    </div>
        <button button [disabled]="addForm.invalid" class="btn btn-success">Submit</button>
        <button class="btn btn-danger ml-2 " (click)="onCancel()">Cancel</button>
      </form>
    </div>
    <!-- </div> -->
    
    
    
 edit scss
 .feedback-red{
    color: reds;
}


EDIT TS
import { Component, OnInit,HostListener } from '@angular/core';
import { FormGroup, FormControl, Validators, FormBuilder} from '@angular/forms';
import { Router,Params,ActivatedRoute } from '@angular/router';

import { Post } from '../post/post';
import { PostService } from '../post/post.service';
@Component({
  selector: 'app-edit',
  templateUrl: './edit.component.html',
  styleUrls: ['./edit.component.scss']
})
export class EditComponent implements OnInit {

 

 
  constructor(private formBuilder: FormBuilder, private router: Router, private userService: PostService) { }
  addForm: FormGroup;
  usercontact: Post;
  
  emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
  id:any;
  firstname:any;
  lastname:any;
  email:any;
  place:any;
  ngOnInit() {
    const userId = localStorage.getItem('editUserId');
    if (!userId) {
      alert('Invalid action.');
      this.router.navigate(['']);
      return;
    }
  this.addForm = this.formBuilder.group({
      id: [],
      email: ['', [Validators.required, Validators.pattern(this.emailRegex)]],
      firstname: ['', Validators.required],
      lastname: ['', Validators.required],
      place:['',Validators.required]
    });
    const data = this.userService.getUserById(+userId);
    this.addForm.setValue(data);
  }
  
    isInvalid(name: string) {
    const control = this.addForm.get(name);
    return control.invalid && control.dirty;
  }
  
  isEmailInvalid(name: string) {
    const control = this.addForm.get(name);
    return control.invalid && control.dirty;
  }
  
  onSubmit() {
    this.userService.update(this.addForm.value);
    this.router.navigate(['/view']);
  }
  
  onCancel() {
    this.router.navigate(['/view']);
  }
  // capslockOn;
  // @HostListener('window:click', ['$event']) onClick(event){
  // this.getcapsfun(event);
  //   }
  //  @HostListener('window:keydown', ['$event'])
  //  onKeyDown(event){
  //  this.getcapsfun(event)
  //  }
  //  @HostListener('window:keyup', ['$event'])
  //   onKeyUp(event){
  //   if (event.getModifierState && event.getModifierState('CapsLock')) {
  //    this.capslockOn = true;
  //   } else {
  //    this.capslockOn = false;
  //   }
  //  }
  //  getcapsfun(e){if (e.getModifierState && e.getModifierState('CapsLock')) {
  //   this.capslockOn = true;
  //   } else {
  //    this.capslockOn = false;
  //   }}
}



view

<!-- <div class="center">
    <table  id="users" >
       
            <tr>
             <th *ngFor="let recoeds of header">{{recoeds}}</th>
          <th>Action</th>
            </tr>
         
           <tr *ngFor="let test of rows">
               <td *ngFor="let recoeds of header" >
                   {{test[recoeds]}}
               </td>
               <button (click)="btnclick()">Edit</button>
           </tr>
 
       
    </table>
 </div> -->
 <!-- <div class="row"> -->
  <header>
    <div >
      <i class="material-icons" style="cursor: pointer;">menu</i>
      <i class="material-icons" [matMenuTriggerFor] = "menu" style="margin-left: 1458px; cursor: pointer;">settings</i>
  </div>
  <mat-menu #menu = "matMenu">
     <button mat-menu-item>New</button>
     <button mat-menu-item>Open</button>
     <button mat-menu-item >Recent</button>
  </mat-menu>
  <mat-menu #setting = "matMenu">
     <button mat-menu-item (click)="oncline()">logout</button>
  </mat-menu>
  
  </header>
  <img src="./assets/images/user.png" style="width: 98px;
  /* text-align: center; */
  margin-left: 628px;
  /* margin-bottom: -20px; */
  margin-top: 179px;" alt="Italian Trulli" (click)="onclick()">
<!-- <img [src]="./assets/images/user.png"> -->
    <footer>
      © <span class="footer" id="year" style="text-align: center;">{{getFullYear()}}</span> 
    </footer>
    <!-- <div class="code-editor" #codeEditor></div> -->
    
    
    
    div.code-editor {
    max-height: 70vh;
}

footer {
    height: 25px !important;
 width: 100% !important;
 position: fixed !important;
 bottom: 0px !important;
 background-color: gray !important;
 text-align:center !important;
 color: #fff !important;
 z-index: 99 !important;
 }  
 
 
 
 import { Component, OnInit,HostListener,Renderer2, ViewChild, ElementRef } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { Validators } from '@angular/forms';
import { FormGroup } from '@angular/forms';
import {Router} from '@angular/router'
import { Observable } from 'rxjs';
import { Post } from '../post/post';
import { PostService } from '../post/post.service';
@Component({
  selector: 'app-view',
  templateUrl: './view.component.html',
  styleUrls: ['./view.component.scss']
})
export class ViewComponent implements OnInit {
  usercontacts: Post[]; // Array<string>
  usercont: Post;
  selectedUser: any;
  addForm: FormGroup;
  usercontact: Post;
  @ViewChild('logger')
  public logger: ElementRef;
  public selection = true;
  public selectionMode = 'multiple';
  public selectionModes = [];
  public $rowEditEnter = false;
  public $cellEditEnter = false;
  public $cellEdit = false;
  public $rowEdit = false;
  emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
  id:any;
  firstname:any;
  lastname:any;
  email:any;
  place:any;
  isLoggedIn$: Observable<boolean>;
  currentUser: Post;
    users: Post[] = [];
  constructor(private renderer:Renderer2,private formBuilder: FormBuilder,private ucs: PostService,private router:Router,private userService: PostService) {
    this.currentUser = JSON.parse(localStorage.getItem('currentUser'));
   }

  ngOnInit(): void {
    // console.log('usercontact:init');
    console.log(this.currentUser)
    this.usercontacts = this.ucs.getall();
    // console.log(this.usercontacts);
    this.isLoggedIn$ = this.ucs.isLoggedIn;
   
}
  


getFullYear() {
  return new Date().getFullYear();
}



// constructor(private authService: AuthService) { }


onLogout() {
  this.ucs.logout();
}
oncline(){
  this.ucs.logout();
}

onclick(){
  this.router.navigate(['/header'])
}
}


Login html

<!-- <div class="row"> -->
    <!-- <button  style="margin-left: 654px; margin-top: 253px;" (click)="btnclick()">login</button> -->
<!-- </div> -->
<!-- <div class="login100-pic">
  <img src="./assets/images/download.jpeg" alt="IMG"
    style="width: 570px; position: relative; right: 150px;top: 10px;max-width: 900px;">
</div> -->

<div class="signin-content">
    <mat-card>
      <mat-card-content>
        <form [formGroup]="form" (ngSubmit)="onSubmit()">
          <p>Please login to continue</p>
          <mat-form-field class="full-width-input">
            <input matInput placeholder="User" formControlName="userName" required>
            <mat-error *ngIf="isFieldInvalid('userName')">
              Please inform your user name
            </mat-error>
          </mat-form-field>
          <mat-form-field class="full-width-input">
            <input matInput type="password" placeholder="Password" formControlName="password" required>
            <mat-error *ngIf="isFieldInvalid('userName')">
              Please inform your password
            </mat-error>
          </mat-form-field>
          <button mat-raised-button color="primary" type="submit">Login</button>
        </form>
      </mat-card-content>
    </mat-card>
  </div>
  <!-- <footer>
    © <span class="footer" id="year" style="text-align: center;">{{getFullYear()}}</span> 
  </footer> -->

Scss

mat-card {
    max-width: 400px;
    margin: 2em auto;
    text-align: center;
  }
  .signin-content {
    padding: 60px 1rem;
  }
  .full-width-input {
    width: 100%;
  }
  
  ts
  
  
  import { Component, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';

import {Router} from '@angular/router'
import { fabric } from 'fabric';
import { PostService } from '../post/post.service';
// import * as fabric from 'fabric/fabric-impl';
@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit {

//   constructor(private router:Router) { }


// //   ngOnInit(): void {
// //   }
// //   btnclick(){
// //   this.router.navigate(['/view'])
// // }
// // canvas: any;

//    ngOnInit() {
// //      this.canvas = new fabric.Canvas('canvas');
// //      this.canvas.add(new fabric.IText('Hello World !'));
// //      var object = new fabric.Rect({
// //       width: 100,
// //       height: 100,
// //       fill: 'blue',
// //       opacity: 1,
// //       left: 0,
// //       top: 0
// // });
// //      this.canvas.add(object); 
// //      var circle = new fabric.Circle({
// //       radius: 15,
// //       fill: 'blue',
// //       left: 100,
// //       top: 100
// //     });
// //     this.canvas.add(circle); 
//    }
  
//    btnclick(){
//       this.router.navigate(['/view'])
//    }

form: FormGroup;
private formSubmitAttempt: boolean;

constructor(
  private fb: FormBuilder,
  private ucs: PostService
) {}

ngOnInit() {
  this.form = this.fb.group({
    userName: ['', Validators.required],
    password: ['', Validators.required]
  });
}

isFieldInvalid(field: string) {
  return (
    (!this.form.get(field).valid && this.form.get(field).touched) ||
    (this.form.get(field).untouched && this.formSubmitAttempt)
  );
}
object:any=[]
onSubmit() {
  console.log("userdetails",this.form.value)
  if (this.form.valid) {
    this.ucs.login(this.form.value);
  }
  this.formSubmitAttempt = true;
  this.object=this.form.value
  console.log("value",this.object)
}


getFullYear() {
  return new Date().getFullYear();
}

}

header html


<div class="row">
    <div class="col-lg-12">
      <div class="card">
        <div class="card-body">
          <!-- <button class=" btn btn-primary " style="    margin-left: 1035px;
          margin-top: 9px;
          margin-bottom: 15px;" (click)="btnclass()">Create new</button>&nbsp;&nbsp; -->
          <button class="btn btn-primary"  style="margin-bottom: 6px;" (click)="onLogout1()">back</button>&nbsp;
          <button mat-icon-button>
            <mat-icon aria-label="Heart">favorite</mat-icon>
         </button>
 <div class="usercontact-list">  
    <table class="table table-bordered">
    <thead>
      <tr>
        <th>profile</th>
        <th>Id</th>
        <th>Firstname</th>
        <th>Lastname</th>
        <th>Email</th>         
        <th>Place</th>
        <th>Edit</th>
        <th>Delete</th>
        
      
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let u of usercontacts"
      (rowEditEnter)="rowEditEnter($event)"
      (cellEditEnter)="cellEditEnter($event)"
      (cellEdit)="cellEdit($event)"
      (cellEditDone)="cellEditDone()"
      (cellEditExit)="cellEditExit()"
      (rowEdit)="rowEdit($event)"
      (rowEditDone)="rowEditDone()"
      (rowEditExit)="rowEditExit()" (click)="RowSelected(u);">
      <td>
        <img [src]="u.profile" style="max-width: 60px;"/> </td>
        <td> {{u.id}}</td>
        <td> {{u.firstname}} </td>
        <td>{{u.lastname}} </td>
        <td> {{u.email}} </td>
        <td>{{u.place}} </td>
        <td>
         
            <button class=" btn btn-primary "  (click)="editUserContact(u)">Edit</button>
            
        </td>
        
        <td>
          <button class="btn btn-danger ml-2 "  (click)="deleteUserContact(u) ">Delete</button>
        </td>
        
      </tr>
    </tbody>
    </table>
  </div>
</div>
</div>
</div>
</div>


scss


footer {
    height: 25px !important;
 width: 100% !important;
 position: fixed !important;
 bottom: 0px !important;
 background-color: gray !important;
 text-align:center !important;
 color: #fff !important;
 z-index: 99 !important;
 }  
 
 // import { Route } from '@angular/compiler/src/core';
import { Component, ElementRef, HostListener, OnInit, Renderer2, ViewChild } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { Post } from '../post/post';
import { PostService } from '../post/post.service';
// import {MatIconModule} from '@angular/material/icon';
@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.scss']
})
export class HeaderComponent implements OnInit {
  usercontacts: Post[]; // Array<string>
  usercont: Post;
  selectedUser: any;
  addForm: FormGroup;
  usercontact: Post;
  @ViewChild('logger')
  public logger: ElementRef;
  public selection = true;
  public selectionMode = 'multiple';
  public selectionModes = [];
  public $rowEditEnter = false;
  public $cellEditEnter = false;
  public $cellEdit = false;
  public $rowEdit = false;
  emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
  id:any;
  firstname:any;
  lastname:any;
  email:any;
  place:any;
  isLoggedIn$: Observable<boolean>;
  constructor(private renderer:Renderer2,private formBuilder: FormBuilder,private ucs: PostService,private router:Router,private userService: PostService) { }

  ngOnInit(): void {
    console.log('usercontact:init');
    this.usercontacts = this.ucs.getall();
    console.log(this.usercontacts);
    this.isLoggedIn$ = this.ucs.isLoggedIn;
   
}
  
  RowSelected(u:any){
    this.selectedUser=u;   // declare variable in component.
    }
    capslockOn;
  @HostListener('window:click', ['$event']) onClick(event){
  this.getcapsfun(event);
    }
   @HostListener('window:keydown', ['$event'])
   onKeyDown(event){
   this.getcapsfun(event)
   }
   @HostListener('window:keyup', ['$event'])
    onKeyUp(event){
    if (event.getModifierState && event.getModifierState('CapsLock')) {
     this.capslockOn = true;
    } else {
     this.capslockOn = false;
    }
   }
   getcapsfun(e){if (e.getModifierState && e.getModifierState('CapsLock')) {
    this.capslockOn = true;
    } else {
     this.capslockOn = false;
    }}
  
  editUserContact(usercontact: Post) {
    console.log( "userdetails", usercontact);
    localStorage.removeItem('editUserId');
    localStorage.setItem('editUserId', usercontact.id.toString());
    this.router.navigate([`/edit`])
    // this.ucs.update(usercontact);
  }

  deleteUserContact(usercontact: Post) {
    console.log("usercontact",usercontact);
    this.ucs.delete(usercontact);
  }
  btnclass(){
    this.router.navigate(['/create'])
  }
  shapes(){
    this.router.navigate(['/shapes'])
  }
  public selectCellSelectionMode(args) {
    this.selectionMode = this.selectionModes[args.index].label;
    //  this.snackbar.open();
}
public rowEditEnter(evt) {
  evt.cancel = this.$rowEditEnter;
  this.logAnEvent(`=> 'rowEditEnter' with 'RowID':` + evt.rowID, evt.cancel);
}
public cellEditEnter(evt) {
  evt.cancel = this.$cellEditEnter;
  this.logAnEvent(`=> 'cellEditEnter' with 'value':` + evt.oldValue, evt.cancel);
}
public cellEdit(evt) {
  evt.cancel = this.$cellEdit;
  this.logAnEvent(`=> 'cellEdit' with 'newValue':` + evt.newValue, evt.cancel);
}
public cellEditDone() {
  this.logAnEvent(`=> 'cellEditDone'`);
}
public cellEditExit() {
  this.logAnEvent(`=> 'cellEditExit'`);
}
public rowEdit(evt) {
  evt.cancel = this.$rowEdit;
  this.logAnEvent(`=> 'rowEdit'`, evt.cancel);
}
public rowEditDone() {
  this.logAnEvent(`=> 'rowEditDone'`);
}
public rowEditExit() {
  this.logAnEvent(`=> 'rowEditExit'  << End of cycle >>`);
}
private logAnEvent(msg: string, canceled?: boolean) {
const createElem = this.renderer.createElement('p');

if (canceled) {
    msg = msg.concat(': has been canceled ');
}

const text = this.renderer.createText(msg);
this.renderer.appendChild(createElem, text);
const container = this.logger.nativeElement;
this.renderer.insertBefore(container, createElem, container.children[0]);
}
public clearLog() {
const  elements = this.logger.nativeElement.querySelectorAll('p');
for (let index = 0; index < elements.length; index++) {
    this.renderer.removeChild(this.logger.nativeElement, elements[index]);
}
}
enableEdit = false;
  enableEditIndex = null;
enableEditMethod(e, i) {
  console.log("eeeee",e)
  console.log("eeeee",i)
  this.enableEdit = true;
  this.enableEditIndex = i;
  console.log(i, e);
}



getFullYear() {
  return new Date().getFullYear();
}



// constructor(private authService: AuthService) { }


onLogout1(){
  this.router.navigate(['/header'])
}
onLogout() {
  this.ucs.logout();
}
oncline(){
  this.ucs.logout();
}

oncline1(){
  this.router.navigate(['/view'])
}
}












Footer
<header>
    <div >
      <i class="material-icons" style="cursor: pointer;">menu</i>
      <i class="material-icons" [matMenuTriggerFor] = "menu" style="margin-left: 1452px; cursor: pointer;">settings</i>
  </div>
  <mat-menu #menu = "matMenu">
     <button mat-menu-item>Home</button>
     <button mat-menu-item (click)="oncline1()">back</button>
     <button mat-menu-item (click)="oncline()">Logout</button>
  </mat-menu>
  <mat-menu #setting = "matMenu">
     <button mat-menu-item (click)="oncline()">logout</button>
  </mat-menu>
  
  </header>
<div>

    <i   *ngIf="show" class="material-icons "(click)="openModal(templateEdit)"  style="cursor: pointer;     margin-left: 754px;
    margin-top: 250px;" >add</i>
    <!-- <div [ngSwitch]="myDir" style="color:Green"> -->
        <ng-template #templateEdit> 
            <div class="modal-header">
                <h4 class="modal-title pull-left">User Information</h4>
                <button type="button" class="close pull-right" aria-label="Close" (click)="modalRef.hide()">
                  <span aria-hidden="true">&times;</span>
                </button>

              </div>
              <div class="form-group row" style="margin-top: 2rem;">
                <label class="col-lg-3 text-left control-label col-form-label" style="margin-left: 4rem;">Name</label>
                <div class="col-lg-6 ">
                  <input required class="form-control" placeholder="" type="text" name="docname" [(ngModel)]="docname">
                </div>
              </div>
              <div class="form-group row" style="margin-top: 2rem;">
                <label class="col-lg-3  text-left control-label col-form-label" style="margin-left: 4rem;">Email-Id</label>
                <div class="col-lg-6 ">
                  <input required class="form-control" placeholder="" type="text" name="doccodee" [(ngModel)]="doccode">
                </div>
              </div>
              <div style="text-align: center;margin-bottom: 2rem;">
                <button class="save_btn btn btn-rounded btn-primary mr-2" 
                  style="background-color: #6EACAF !important; border-color: #6EACAF;" (click)="onsave()" type="Save">Save</button>
                  <button type="button"  class="cancel_btn btn btn-rounded btn-primary mr-2" style="background-color: #c9656a !important ;border-color: #c9656a;"  >Back</button>
              </div>
  </ng-template>
  <div *ngIf="!show" class="row">
    <div style="width: 174px;
    margin-left: 100px;">
    <select [value]="-1"  formControlName="website" class="form-control" 
    (change)="createDocName($event)" [(ngModel)]="selectvalue">  
      <!-- <option disabled>Select Website</option>   -->
      <option [value]="-1" disabled selected hidden>---Select---</option>
      <option *ngFor="let web of defaultarray" [selected]="web.name== selectvalue">{{web.name}}</option>  
  </select>  
</div>
    <div class="col-lg-12">
      <div class="card">
        <div class="card-body">
          <!-- <button class=" btn btn-primary " style="    margin-left: 1035px;
          margin-top: 9px;
          margin-bottom: 15px;" (click)="btnclass()">Create new</button>&nbsp;&nbsp; -->
          <!-- <button class="btn btn-primary"  style="margin-bottom: 6px;" (click)="onLogout1()">back</button>&nbsp; -->
          <button mat-icon-button>
            <mat-icon aria-label="Heart">favorite</mat-icon>
         </button>
         
 <div class="usercontact-list">  



    <table class="table table-bordered">
    <thead>
      <tr>
        <th>Id</th>
        <th>Firstname</th>
        <th>Email-Id</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let u of myItems">
        <td>{{u.id}} </td>
        <td> {{u.name}} </td>
        <td> {{u.emailid}}</td>
        <td>
          <i  class="material-icons "(click)="openModal(templateEdit)"  style="cursor: pointer;" >add</i>  
        </td>
      </tr>
    </tbody>
    </table>
  </div>
</div>
</div>
</div>
</div>


  <!-- </div> -->
</div>

<footer>
    © <span class="footer" id="year" style="text-align: center;">{{getFullYear()}}</span> 
  </footer>
  
  
footer {
    height: 25px !important;
 width: 100% !important;
 position: fixed !important;
 bottom: 0px !important;
 background-color: gray !important;
 text-align:center !important;
 color: #fff !important;
 z-index: 99 !important;
 }  



  .modal-header{    background: #333333 !important;
    color: white;border-radius: 15px 15px 0px 0px;
   padding: 10px;}
 .modal-body{background-color: #fff !important;
   border-radius: 0px 0px 15px 15px;}
 .modal-header .close{    background: transparent  !important;
   color: white;
    opacity: 1;}
   .modal-title{color:#fff !important;}
   .required{
   color: red;
   margin: 4px;
  
}

import { Component, ElementRef, HostListener, OnInit, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { FormGroup, FormBuilder ,FormControl, 
  FormArray,
  Validators} from '@angular/forms';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { Post } from '../post/post';
import { PostService } from '../post/post.service';
import { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';
export class MyItems {    
  Value: string;    
  constructor(Value:string)    
  {    
    this.Value = Value;    
  }    
}   
@Component({
  selector: 'app-footer',
  templateUrl: './footer.component.html',
  styleUrls: ['./footer.component.scss']
})
export class FooterComponent implements OnInit {
  email: FormControl;
  usercontacts: Post[]; // Array<string>
  usercont: Post;
  selectedUser: any;
  addForm: FormGroup;
  usercontact: Post;
  @ViewChild('logger')
  public logger: ElementRef;
  public selection = true;
  public selectionMode = 'multiple';
  public selectionModes = [];
  public $rowEditEnter = false;
  public $cellEditEnter = false;
  public $cellEdit = false;
  public $rowEdit = false;
  emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
  id:any=0;
  firstname:any;
  lastname:any;
  // email:any;
  place:any;
  isLoggedIn$: Observable<boolean>;
  constructor(private modalService: BsModalService,private renderer:Renderer2,private formBuilder: FormBuilder,private ucs: PostService,private router:Router,private userService: PostService) { }
  buyTicketForm: FormGroup;
  ngOnInit(): void {
    console.log('usercontact:init');
    this.usercontacts = this.ucs.getall();
    console.log(this.usercontacts);
    this.isLoggedIn$ = this.ucs.isLoggedIn;
    
   
}modalRef: BsModalRef;
openModal(templateEdit: TemplateRef<any>) {

  console.log("formid",templateEdit)
  this.modalRef = this.modalService.show(templateEdit,
      Object.assign({}, { class: 'modal-lg' }));

      
  }
  RowSelected(u:any){
    this.selectedUser=u;   // declare variable in component.
    }
    capslockOn;
  @HostListener('window:click', ['$event']) onClick(event){
  this.getcapsfun(event);
    }
   @HostListener('window:keydown', ['$event'])
   onKeyDown(event){
   this.getcapsfun(event)
   }
   @HostListener('window:keyup', ['$event'])
    onKeyUp(event){
    if (event.getModifierState && event.getModifierState('CapsLock')) {
     this.capslockOn = true;
    } else {
     this.capslockOn = false;
    }
   }
   getcapsfun(e){if (e.getModifierState && e.getModifierState('CapsLock')) {
    this.capslockOn = true;
    } else {
     this.capslockOn = false;
    }}
  


  deleteUserContact(usercontact: Post) {
    console.log("usercontact",usercontact);
    this.ucs.delete(usercontact);
  }
  btnclass(){
    this.router.navigate(['/create'])
  }
  shapes(){
    this.router.navigate(['/shapes'])
  }
 
enableEdit = false;
  enableEditIndex = null;
enableEditMethod(e, i) {
  console.log("eeeee",e)
  console.log("eeeee",i)
  this.enableEdit = true;
  this.enableEditIndex = i;
  console.log(i, e);
}



getFullYear() {
  return new Date().getFullYear();
}

onLogout() {
  this.ucs.logout();
}
oncline(){
  this.ucs.logout();
}

oncline1(){
  this.router.navigate(['/view'])
}

obj:any;
docname:any;
doccode:any;
onsave(){

this.obj={
  "name":this.docname,
  "emailid":this.doccode,
  
}
console.log("output of the content",this.obj)
this.getlist()
this.AddItem()
this.modalRef.hide();
}
show:boolean=true
client:any;
getlist(){
  this.client=
{
  id:this.id+1,
  name:this.obj.name,
emailid:this.obj.emailid}
  
  console.log("client data",this.client)
  this.show=false

  // this.AddItem()
}
myItems: MyItems[] = new Array();  
newItem: any = {};   
test:any;
AddItem() {    
  this.myItems.push(    
    this.client    
  ); 
  
  console.log("ffwef",this.client)
  console.log("itemvalue",this.myItems)
  for(var i=0;i<this.myItems.length;i++){   
    console.log("eeeeeeeeeeeeee",i)
  // this.client = {};    

  this.name=this.myItems[i]
  this.id = i
  console.log("this.us",this.id)
  }
  this.getlistofdrp()
  
}  
testdata:any=[1,2,3,4,3,2,4,5,6,3,2,5,6]
defaultarray:any=[];
// getlistofdrp(){
//   this.data=this.myItems
//   console.log("dropdowlwavue",this.data)
//   const map = new Map();
//     for (const item of this.data) {
//       if (!map.has(item.id)) {
//         map.set(item.id, true);
//         this.defaultarray.push({
//           Id: item.id,
//           name: item.name,

//         });
//       }

//     }
// }


array:any=[]
getlistofdrp(){
  this.data=this.testdata
  console.log("dropdowlwavue",this.data)
  const map = new Map();
    for (const item of this.data) {
      if (!map.has(item)) {
        map.set(item, true);
        this.defaultarray.push({
          Id: item,
          // name: item.name,

        });
      console.log("item",item)
      this.array = item
      for(var i=0;i<this.array.length;i++){
        this.noofdocument.push(this.array[i].id)
      }  
      // console.log("jbfjadbakjdwuwqiqwj",this.noofdocument)

      }

    }
}
noofdocument:any;
data:any
name:any=[];
createDocName(e){
console.log("evefnt in the footer oage",e.target.value)
}
}


post.ts


export class Post {
    id:number;
    firstname:string;
    lastname:string;
    email:string;
    place:string;
    type: string;
    profile:string;
  x:number;
  y:number;
  w:number;
  h:number;
  userName: string;
  password: string;
}

post services

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { Post } from './post';
import { Client } from './client';
// import { Shape } from './shape';
@Injectable({
  providedIn: 'root'
})
export class PostService {
  private loggedIn: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  users: any;
  user: Post;

  constructor(
    private router: Router,private _http: HttpClient
  ) {}

  // public currentUserSubject = new BehaviorSubject<Post>(new Post());
  // public currentUser = this.currentUserSubject.asObservable().distinctUntilChanged();
  // public clientUser = this.clientUserSubject.asObservable().distinctUntilChanged();
  // private clientUserSubject = new BehaviorSubject<Client>(new ());
  usercontacts :Post []=[
    {id: 1,
    firstname: 'Alex',
    lastname: 'BlaBla',
    email: 'alex.blabla@aol.at',
    place:'polyfills',
    type:'ellipse', x:10, y:10, w:12, h:34,
    profile:'./assets/images/images2.jpeg',
    userName: "",
    password: "",

  },
  {
    id: 2,
    firstname: 'Otto',
    lastname: 'Blubb',
    email: 'otto.blubb@dsl.de',
    place:'rendered',
    type:'line', x:60, y:20, w:12, h:34,
    profile:'./assets/images/download4.png',
    userName: "",
    password: "",
  },
  {
    id: 3,
    firstname: 'Peter',
    lastname: 'Pan',
    email: 'peter.pan@neverland.com',
    place:'initial',
    type:'rectangle', x:30, y:30, w:12, h:34,
    profile:'./assets/images/images3.jpeg',
    userName: "",
    password: "",
  },
  {
    id: 4,
    firstname: 'jemas',
    lastname: 'list',
    email: 'jemas.list@dsl.de',
    place:'styles',
    type:'rectangle', x:30, y:30, w:12, h:34,
    profile:'./assets/images/download (1).jpeg',
    userName: "",
    password: "",
  },
  {
    id: 5,
    firstname: 'chunks',
    lastname: 'details',
    email: 'chunks.vdetails@dsl.de',
    place:'live',
    type:'line', x:60, y:20, w:12, h:34,
    profile:'./assets/images/download2.png',
    userName: "",
    password: "",
  },
  {
    id: 6,
    firstname: 'sucess',
    lastname: 'employee',
    email: 'sucess.blubb@dsl.de',
    place:'vendors',
    type:'line', x:60, y:20, w:12, h:34,
    profile:'./assets/images/download3.jpeg',
    userName: "",
    password: "",
  },
  {
    id: 7,
    firstname: 'unchange',
    lastname: 'create',
    email: 'employee.vcreate@dsl.de',
    place:'browser',
    type:'ellipse', x:10, y:10, w:12, h:34,
    profile:'./assets/images/download4.jpeg',
    userName: "",
    password: "",
  },
  {
    id: 8,
    firstname: 'hash',
    lastname: 'services',
    email: 'hash.services@dsl.de',
    place:'server',
    type:'ellipse', x:10, y:10, w:12, h:34,
    profile:'./assets/images/images1.png',
    userName: "",
    password: "",
  }]
  create(usercontact: Post) {
    const itemIndex = this.usercontacts.length;
    usercontact.id = this.getnextId();
    // console.log(usercontact);
    this.usercontacts[itemIndex] = usercontact;
  }
  delete(usercontact: Post) {
    this.usercontacts.splice(this.usercontacts.indexOf(usercontact), 1);
  }

  update(usercontact: Post) {
    const itemIndex = this.usercontacts.findIndex(item => item.id === usercontact.id);
    // console.log(itemIndex);
    this.usercontacts[itemIndex] = usercontact;
  }
  
  // find(id): Observable<Post> {
  //   return this.httpClient.get<Post>(this.apiURL + '/posts/' + id)
  //   .pipe(
  //     catchError(this.errorHandler)
  //   )
  // }
   
  getall(): Post[] {
    // console.log('usercontactservice:getall');
    // console.log(this.usercontacts);
    return this.usercontacts;
  }
  getUserById(id: number) {
    // console.log(id);
    const itemIndex = this.usercontacts.findIndex(item => item.id === id);
    // console.log(itemIndex);
    return this.usercontacts[itemIndex];
  }
  getnextId(): number {
    let highest = 0;
    this.usercontacts.forEach(function (item) {
      if (highest === 0) {
        highest = item.id;
      }
      if (highest < item.id) {
        highest = item.id;
      }
    });
    return highest + 1;
  }
  get isLoggedIn() {
    return this.loggedIn.asObservable();
  }
  getShapes(){return this.usercontacts;}
  login(user: Post) {
    if (user.userName !== '' && user.password !== '' ) {
      this.loggedIn.next(true);
      this.currentuser=user
      console.log("sadasasad",this.currentuser)
      this.router.navigate(['/view']);
    }
  }
  currentuser:any;
  logout() {
    this.loggedIn.next(false);
    this.router.navigate(['/login']);
  }


}



client.ts
export class Client {
    id:number;
    firstname:string;
    lastname:string;
    email:string;
    place:string;
    type: string;
    profile:string;
  x:number;
  y:number;
  w:number;
  h:number;
  userName: string;
  password: string;
}



authentication.services

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';

@Injectable()
export class AuthenticationService {
    constructor(private http: HttpClient) { }

    login(username: string, password: string) {
        return this.http.post<any>(`/users/authenticate`, { username: username, password: password })
            .pipe(map(user => {
                // login successful if there's a jwt token in the response
                if (user && user.token) {
                    // store user details and jwt token in local storage to keep user logged in between page refreshes
                    localStorage.setItem('currentUser', JSON.stringify(user));
                }

                return user;
            }));
    }

    logout() {
        // remove user from local storage to log user out
        localStorage.removeItem('currentUser');
    }
}



route


import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { CreateComponent } from './create/create.component';
import { LoginComponent } from './login/login.component';
import { EditComponent } from './edit/edit.component';
import { ViewComponent } from './view/view.component';
import { ShapesComponent } from './shapes/shapes.component';
import { AddshapesComponent } from './addshapes/addshapes.component';
import { CanvasComponent } from './canvas/canvas.component';
import { ShapTypeComponent } from './shap-type/shap-type.component';
import { FooterComponent } from './footer/footer.component';
import { HeaderComponent } from './header/header.component';

const routes: Routes = [
  {
    path:'',
    redirectTo
    : '/login',
    pathMatch:'full'
  },
  // {
  //   path:'',
  //   redirectTo
  //   : '/data',
  //   pathMatch:'full'
  // },
  {
    path:'login',
    component:LoginComponent,
    data: { title: 'login' }

  },
  {
    path:'create',
    component:CreateComponent,
    data: { title: 'create' }

  },
  {
    path:'footer',
    component:HeaderComponent,
    data:{title:'footer'}
  },
  {
    path:'header',
    component:FooterComponent,
    data:{title:'header'}
  },
  {
    path:'edit',
    component:EditComponent,
    data:{title:'edit'}
  },
  {
    path:'view',
    component:ViewComponent,
    data:{title:'view'}
  },
  {
    path:'data',
    component:AddshapesComponent,
    data:{title:'addshapes'}
  },
  {
    path:'canvas',
    component:CanvasComponent,
    data:{title:'canvas'}
  },
  {
    path:'Dashboard',
    component:ShapTypeComponent,
    data:{title:'shapetype'}
  },
  
  {
    path:'shapes',
    component:ShapesComponent,
    data:{title:'shapes'}
  }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }


model.ts

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { CreateComponent } from './create/create.component';
import { EditComponent } from './edit/edit.component';
import { LoginComponent } from './login/login.component';
import { ViewComponent } from './view/view.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { ShapesComponent } from './shapes/shapes.component';
import { AddshapesComponent } from './addshapes/addshapes.component';
import { CanvasComponent } from './canvas/canvas.component';
import { ShapTypeComponent } from './shap-type/shap-type.component';
import { HeaderComponent } from './header/header.component';
import { FooterComponent } from './footer/footer.component';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { ModalModule } from 'ngx-bootstrap';
import { HttpClientModule } from '@angular/common/http';
// import { ModalModule } from 'ngx-bootstrap';
import { TooltipModule } from 'ngx-bootstrap';
import { MatIconModule } from '@angular/material/icon';
import {MatSidenavModule} from '@angular/material/sidenav'
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import {MatMenuModule} from '@angular/material/menu'
@NgModule({
  declarations: [
    AppComponent,
    CreateComponent,
    EditComponent,
    LoginComponent,
    ViewComponent,
    ShapesComponent,
    AddshapesComponent,
    CanvasComponent,
    ShapTypeComponent,
    HeaderComponent,
    FooterComponent,
   
    
  ],
  exports: [
    MatToolbarModule,
    MatCardModule,
    MatInputModule,
    MatFormFieldModule,
    MatButtonModule
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    ModalModule.forRoot(),
    AppRoutingModule,
    ReactiveFormsModule,
    MatSidenavModule,
    FormsModule,
    TooltipModule,
    MatButtonModule,
    MatInputModule,
    MatMenuModule,
    MatFormFieldModule,
    MatToolbarModule,
    MatCardModule,

    RouterModule.forRoot([
     
    ]),
    BrowserAnimationsModule,
    // MatIconRegistry,
     MatIconModule

  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


index.html

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Test</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href=".../material-design-icons.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body class="mat-typography">
  <app-root></app-root>
</body>
</html>



style.scss
/* You can add global styles to this file, and also import other style files */
@import "~bootstrap/dist/css/bootstrap.css";
html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }



package.ts
{
  "name": "test",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "e2e": "ng e2e"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "~10.2.0",
    "@angular/cdk": "^10.2.7",
    "@angular/common": "~10.2.0",
    "@angular/compiler": "~10.2.0",
    "@angular/core": "~10.2.0",
    "@angular/forms": "~10.2.0",
    "@angular/material": "^10.2.7",
    "@angular/platform-browser": "~10.2.0",
    "@angular/platform-browser-dynamic": "~10.2.0",
    "@angular/router": "~10.2.0",
    "@ng-bootstrap/ng-bootstrap": "^3.3.1",
    "@types/fabric": "^4.2.6",
    "bootstrap": "^4.6.0",
    "devextreme": "^21.1.3",
    "devextreme-angular": "21.1.3",
    "devextreme-aspnet-data-nojquery": "^2.1.1",
    "fabric": "^4.3.1",
    "fabric-history": "^1.1.0",
    "material-design-icons-iconfont": "^6.1.1",
    "ngx-bootstrap": "^5.5.0",
    "rxjs": "~6.6.0",
    "rxjs-compat": "^6.6.7",
    "tslib": "^2.0.0",
    "zone.js": "~0.10.2"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "~0.1002.0",
    "@angular/cli": "~10.2.0",
    "@angular/compiler-cli": "~10.2.0",
    "@types/node": "^12.11.1",
    "@types/jasmine": "~3.5.0",
    "@types/jasminewd2": "~2.0.3",
    "codelyzer": "^6.0.0",
    "jasmine-core": "~3.6.0",
    "jasmine-spec-reporter": "~5.0.0",
    "karma": "~5.0.0",
    "karma-chrome-launcher": "~3.1.0",
    "karma-coverage-istanbul-reporter": "~3.0.2",
    "karma-jasmine": "~4.0.0",
    "karma-jasmine-html-reporter": "^1.5.0",
    "protractor": "~7.0.0",
    "ts-node": "~8.3.0",
    "tslint": "~6.1.0",
    "typescript": "~4.0.2"
  }
}






  
